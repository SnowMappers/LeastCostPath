# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# slope.py
# Created on: 2015-01-16 14:45:15.00000
#   (generated by ArcGIS/ModelBuilder)
# Description: 
# ---------------------------------------------------------------------------

# Import arcpy module
import arcpy
import os


# This function makes the buffer, converts it to raster, and reclassifies it.
# it is used for preparing rasters for road, railroad, river and lake for the cost raster
def create_cost_layer(folder, dem_raster, shapefile, out_raster_file, buffer_m):
    #setup folder for temporary results
    temp = os.path.join(folder, "temp")

    #get cellsize and spatial reference for new raster
    sp = dem_raster.spatialReference
    cellSize = dem_raster.meanCellWidth

    #reproject it to same projection as dem
    vectorFile = os.path.join(folder, shapefile)
    vectorFileProj = os.path.join(temp, "projected_" + shapefile)
    arcpy.Project_management(vectorFile, vectorFileProj, sp)

    #get buffer
    bufferFile = os.path.join(temp, "buffer_" + shapefile)
    arcpy.Buffer_analysis(vectorFileProj, bufferFile, str(buffer_m) + " meters")
    arcpy.AddMessage("buffer done!")

    #feature to raster
    rasterFile = os.path.join(temp, "raster_" + shapefile.strip(".shp") + ".tif")
    arcpy.FeatureToRaster_conversion(bufferFile,"BUFF_DIST",rasterFile, cellSize)
    arcpy.AddMessage("feature to raster done!")

    #reclassify to a raster with [0, 1]
    raster = arcpy.sa.Raster(rasterFile)
    cost_raster = arcpy.sa.Con(arcpy.sa.IsNull(raster), 0, 1)
    costFile1 = os.path.join(temp, out_raster_file)
    cost_raster.save(costFile1)
    arcpy.AddMessage("reclassify " + shapefile + " done!")


def create_cost_layer_slope(folder, dem, slopefile):
    temp = os.path.join(folder, "temp")
    slopefile1 = os.path.join(temp, slopefile)
    slope = arcpy.sa.Slope(dem, "PERCENT_RISE", "0.1")
    slope.save(slopefile1)
    arcpy.AddMessage("slope: done!")


# Function One: Prepare the input data
def prepare_data(folder, dem, rail, road, river, lake):
    temp = os.path.join(folder, "temp")
    #create folder for temporary files
    try:
        os.makedirs(temp)
    except OSError:
        pass

    #initialize geoprocessing setting to same cellsize and same
    #extent as the DEM raster
    demfile = os.path.join(folder, dem)
    dem_raster = arcpy.sa.Raster(demfile)
    arcpy.env.extent = dem_raster.extent
    arcpy.env.snapRaster = dem_raster

    slopeCost = "cost_slope.tif"
    create_cost_layer_slope(folder, dem_raster, slopeCost)

    #cost raster layer for road
    roadCost = "cost_road.tif"
    create_cost_layer(folder, dem_raster, road, roadCost, 2000)

    railCost = "cost_rail.tif"
    create_cost_layer(folder, dem_raster, rail, railCost, 2000)

    lakeCost = "cost_lake.tif"
    create_cost_layer(folder, dem_raster, lake, lakeCost, 2000)

    riverCost = "cost_river.tif"
    create_cost_layer(folder, dem_raster, river, riverCost, 2000)

##################################################################
# Start of main script !                                         #
##################################################################

# Check out any necessary licenses
arcpy.CheckOutExtension("spatial")

# Find what is our folder
folder = arcpy.GetParameterAsText(0)
arcpy.AddMessage("folder:" + folder)

# Get our input files
arcpy.env.overwriteOutput = True
arcpy.env.scratchWorkspace = folder + "/temp"
arcpy.env.workspace = folder
dem = "dem.tif"
SLC = "start.shp"
LV = "finish.shp"
rail = "railroads.shp"
lake = "lakes.shp"
river = "rivers.shp"
road = "roads.shp"

prepare_data(folder, dem, rail, road, river, lake)
arcpy.AddMessage("Prepare data completed!")

#now construct the cost raster!
#multipliers for each factor are here:
slope_mult = 5
lake_mult  = 1
river_mult = 1
rail_mult = 1
road_mult = 1

temp = os.path.join(folder, "temp")
slopeCostFile = os.path.join(temp, "cost_slope.tif")
lakeCostFile = os.path.join(temp, "cost_lake.tif")
riverCostFile = os.path.join(temp, "cost_river.tif")
railCostFile = os.path.join(temp, "cost_rail.tif")
roadCostFile = os.path.join(temp, "cost_road.tif")

cost_raster = (arcpy.sa.Raster(slopeCostFile) * slope_mult +
               arcpy.sa.Raster(lakeCostFile) * lake_mult +
               arcpy.sa.Raster(riverCostFile) * river_mult +
               arcpy.sa.Raster(railCostFile) * rail_mult +
               arcpy.sa.Raster(roadCostFile * road_mult))
cost_raster_file = os.path.join(temp, "cost_raster.tif")
cost_raster.save(cost_raster_file)
arcpy.AddMessage("cost raster: done!")

#now do the cost distance
backlinkFile = os.path.join(temp, "backlink.tif")

distance_raster = arcpy.sa.CostDistance(SLC, cost_raster_file, 2000000,backlinkFile)
distance_raster.save(os.path.join(temp, "distance_raster.tif"))
arcpy.AddMessage("cost distance raster: done!")

#now get the path
path_raster = arcpy.sa.CostPath(LV, distance_raster, backlinkFile)
path_raster.save(os.path.join(temp, "path_raster.tif"))
arcpy.AddMessage("cost path raster: done!")

#now convert the path to polyline
path_shapefile = os.path.join(temp, "least_cost_path.shp")
arcpy.RasterToPolyline_conversion(path_raster, path_shapefile)
arcpy.AddMessage("least cost path: done!")

# Local variables:
#dem_gm_srtm3_web_tif = "dem.gm_srtm3.web.tif"
#Slope_tif1 = "C:\\Users\\Jiri\\Documents\\ArcGIS\\Default.gdb\\Slope_tif1"

# Process: Slope
#arcpy.gp.Slope_sa(dem_gm_srtm3_web_tif, Slope_tif1, "DEGREE", "1")

